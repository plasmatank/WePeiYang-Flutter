def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new FileNotFoundException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.huawei.agconnect'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

Properties pro = new Properties()
pro.load(project.rootProject.file('local.properties').newDataInputStream())
print(pro.getProperty('keyAlias'))

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    defaultConfig {
        applicationId "com.twt.service"
        multiDexEnabled true
        minSdkVersion 23
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        manifestPlaceholders = [
                HUAWEI_APP_ID  : "103402255",

                XIAOMI_APP_ID  : "2882303761517785783",
                XIAOMI_APP_KEY : "5851778525783",

                MEIZU_APP_ID   : "146410",
                MEIZU_APP_KEY  : "77b312b3e3b9497bb25298911f7b14d7",

                VIVO_APP_ID    : "105266463",
                VIVO_APP_KEY   : "40e5b229553e31f1842b80915781e2e8",

                OPPO_APP_KEY   : "7cuaXvykA58gkOW4c4oGkG8o0",
                OPPO_APP_SECRET: "f7098A23C18d4B504deCB0caaF1d6064",
        ]
    }

    signingConfigs {
        config {
            v1SigningEnabled true
            v2SigningEnabled true
            try {
                storeFile file(pro.getProperty('jksPath'))
                storePassword pro.getProperty('storePassword')
                keyAlias pro.getProperty('keyAlias')
                keyPassword pro.getProperty('storePassword')
            } catch (ex) {
                ex.printStackTrace()
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.config

            // applicationIdSuffix
            // http://www.androidchina.net/10565.html

            // package和applicationId的区别
            // https://blog.csdn.net/he_xiang_/article/details/81080507
            // 询问了个推技术人员，只要包名不变，就行
            // 高德需要包名和applicationId一致
            // https://lbs.amap.com/faq/android/map-sdk/create-project/46723
            // 华为需要在网站注册所用的包名，已注册
            // 所以测试包不能使用厂商推送
            // QQ sdk也是只需要包名（经测试）

            // 动态配置string.xml
            // https://blog.csdn.net/jerycoupter/article/details/70159410

            // buildConfigField
            // https://www.jianshu.com/p/a614aca9d191

            // 版本：
            //    RELEASE :            微北洋              无Log     com.twt.service           getui.product  正式服务器
            //    ONLINE_TEST :        微北洋ONLINE_TEST   有Log     com.twt.service           getui.product  正式服务器
            //    DEVELOP (default) :  微北洋DEVELOP       有Log     com.twt.service.develop   getui.develop  测试服务器
            def environment = "DEVELOP"

            // https://itnext.io/flutter-1-17-no-more-flavors-no-more-ios-schemas-command-argument-that-solves-everything-8b145ed4285d
            // flutter 1.20 ~ 2.2 的读取方式
            if (project.hasProperty('dart-defines')) {
                // 如果是通过 package.ps1 打包的话就解析固定参数
                def dartEnvironmentVariables = getDartDefines()
                environment = dartEnvironmentVariables.ENVIRONMENT
                if (environment == null) {
                    environment = "RELEASE"
                }
            } else {
                environment = "RELEASE"
            }

            switch (environment) {
                case "ONLINE_TEST":
                    // 个推 product
                    manifestPlaceholders["GETUI_APPID"] = pro.getProperty('getui.product')
                    // 输出调试信息
                    buildConfigField("Boolean", "LOG_OUTPUT", "true")
                    // 设置应用名称
                    resValue("string", "label", "微北洋${environment}")

                    minifyEnabled false
                    shrinkResources false

                    break
                case "DEVELOP":
                    // 个推 develop+
                    manifestPlaceholders["GETUI_APPID"] = pro.getProperty('getui.develop')
                    // 不覆盖正式版安装
                    applicationIdSuffix ".develop"
                    // 输出调试信息
                    buildConfigField("Boolean", "LOG_OUTPUT", "true")
                    // 设置应用名称
                    resValue("string", "label", "微北洋${environment}")

                    minifyEnabled false
                    shrinkResources false

                    break
                default:  // RELEASE
                    environment = "RELEASE"
                    // 个推 product
                    manifestPlaceholders["GETUI_APPID"] = pro.getProperty('getui.product')
                    // 不输出调试信息
                    buildConfigField("Boolean", "LOG_OUTPUT", "false")
                    // 设置应用名称
                    resValue("string", "label", "微北洋")

                    minifyEnabled true
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    shrinkResources true // 删除无用资源

                    break
            }


            android.applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    // 更改输出的安装包的名字 如 4.2.1-RELEASE-app-arm64-v8a-release.apk
                    output.outputFileName = environment + "-" + android.defaultConfig.versionName + "-" + output.outputFileName

                    // 谷歌规定 Google Play 多个安装包不能 versionCode一样
                    // 但是国内应用商店要求多个按爪给你包需要 versionCode一样
                    // 所以将所有 Apk 的版本号重置
                    // https://developer.android.com/studio/build/configure-apk-splits#configure-APK-versions
                    output.versionCodeOverride = android.defaultConfig.versionCode
                }
            }
        }

        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            // 输出调试信息
            buildConfigField("Boolean", "LOG_OUTPUT", "true")

            def environment = "DEVELOP"
            if (project.hasProperty('dart-defines')) {
                def dartEnvironmentVariables = getDartDefines()
                if (dartEnvironmentVariables.ENVIRONMENT == "RELEASE") {
                    environment = "RELEASE"
                }
            }

            switch (environment) {
                case "RELEASE":
                    // 如果要测试厂商推送的话，就不更改包名
                    // 设置应用名称
                    resValue("string", "label", "微北洋DEBUG_RELEASE")
                    // 个推 product
                    manifestPlaceholders["GETUI_APPID"] = pro.getProperty('getui.product')
                    break
                default:
                    // 不覆盖正式版安装
                    applicationIdSuffix ".develop"
                    // 设置应用名称
                    resValue("string", "label", "微北洋DEBUG_DEVELOP")
                    // 个推 develop
                    manifestPlaceholders["GETUI_APPID"] = pro.getProperty('getui.develop')
                    break
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'

    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.9.0"))
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'

    implementation "androidx.work:work-runtime-ktx:2.7.1"

    implementation "androidx.core:core-ktx:1.7.0"

    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.1"

    // 高德 sdk
    // https://lbs.amap.com/api/android-location-sdk/changelog
    implementation 'com.amap.api:location:6.0.0'

    implementation('io.github.lucksiege:pictureselector:v2.7.2') {
        configurations {
            compile.exclude module: 'ucrop'
        }
    }

    // 个推 sdk
    // https://docs.getui.com/getui/version/
    implementation 'com.getui:gtsdk:3.2.8.0'
    implementation 'com.getui:gtc:3.1.7.0'
    // https://docs.getui.com/getui/mobile/vendor/record/
    implementation 'com.getui.opt:hwp:3.1.0'
    implementation 'com.getui.opt:xmp:3.1.1'
    implementation 'com.assist-v3:oppo:3.1.0'
    implementation 'com.assist-v3:vivo:3.1.0'
    implementation 'com.getui.opt:mzp:3.2.0'
    implementation 'com.huawei.hms:push:6.1.0.300'
    // 华为多版本
    // https://developer.huawei.com/consumer/cn/doc/development/AppGallery-connect-Guides/agc-config-flavor-android-0000001057944603

    // QQ sdk
    implementation fileTree(dir: 'libs', include: '*.jar')

    // 友盟 sdk
    implementation 'com.umeng.umsdk:common:9.4.7'// 必选
    implementation 'com.umeng.umsdk:asms:1.5.0'// 必选
    implementation 'com.umeng.umsdk:apm:1.6.2' // 错误分析
    implementation 'com.umeng.umsdk:abtest:1.0.0'//U-App中ABTest能力
}

def getDartDefines() {
    def arguments = URLDecoder.decode(project.property('dart-defines'))
            .split(',')
            .collectEntries { entry ->
                def pair = entry.split('=')
                [(pair.first()): pair.last()]
            }
    println(arguments)
    return arguments
}